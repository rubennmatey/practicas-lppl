package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal    ENT, REAL, CHAR, STR, BOOL, ÑINT, ÑOUBLE, ÑHAR, ÑTRING, ÑOOLEAN, 
            ÑIF, ÑELSIF, ÑELSE, ÑOR, ÑHILE, ÑO, ÑUN, ÑOID, ÑETURN,
            MAS, MENOS, POR, DIV, MEN, MAY, MENI, MAYI, IDEN, PAP, PCIERRE,
            TAM, IGUAL, IAP, ICIERRE, LLAP, LLCIERRE, PC, COMILLAS, BBAJA, CONST, ARBA, COMA;

non terminal  S, INSTRUCTION, L_INSTRUCTION;
non terminal ÑIF_INSTRUCTION, ÑHILE_INSTRUCTION, ÑOR_INSTRUCTION, ÑO_INSTRUCTION, DECLARATION_INSTRUCTION, ASSIGNATION_INSTRUCTION;
non terminal TYPES;


S ::= L_INSTRUCTION;
L_INSTRUCTION ::= INSTRUCTION | INSTRUCTION L_INSTRUCTION;
INSTRUCTION ::= ÑIF_INSTRUCTION | ÑHILE_INSTRUCTION | ÑOR_INSTRUCTION | ÑO_INSTRUCTION | DECLARATION_INSTRUCTION | ASSIGNATION_INSTRUCTION;

ASSIGNATION_INSTRUCTION ::= IDEN IAP E0 ICIERRE PC;
DECLARATION_INSTRUCTION ::= TYPES IDEN PC | TYPES IDEN IAP E0 ICIERRE PC;

TYPES ::= ÑINT | ÑOUBLE | ÑHAR | ÑTRING | ÑOOLEAN;
VALORES ::= ENT | REAL | CHAR | STR | BOOL;


OP0 ::= MAS | MENOS

Ds  ::= DONDE LDs | ;
LDs ::= LDs COMA D | D ;
D   ::= IDEN IGUAL E0 ;
E0  ::= E0 OP0 E1  | E1 ;
E1  ::= E1 OP1 E2  | E2 ;
E2  ::= ENT  | REAL  | IDEN  | PAP E0 PCIERRE ;  
OP0 ::= MAS  | MENOS ;
OP1 ::= POR | DIV ;


