package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};

terminal    ENT, REAL, CHAR, STR, BOOL, ÑINT, ÑOUBLE, ÑHAR, ÑTRING, ÑOOLEAN, 
            ÑIF, ÑELSIF, ÑELSE, ÑOR, ÑHILE, ÑO, ÑUN, ÑOID, ÑETURN,
            MAS, MENOS, POR, DIV, MEN, MAY, MENI, MAYI, IDEN, PAP, PCIERRE,
            TAM, IGUAL, IAP, ICIERRE, LLAP, LLCIERRE, PC, COMILLAS, CONST, ARBA, COMA, ÑOT, ÑOTIGUAL;

non terminal  S, INSTRUCTION, L_INSTRUCTION;
non terminal ÑIF_INSTRUCTION, ÑELSIF_INSTRUCTION, ÑELSE_INSTRUCTION, ÑHILE_INSTRUCTION, ÑOR_INSTRUCTION, ÑO_INSTRUCTION, DECLARATION_INSTRUCTION, ASSIGNATION_INSTRUCTION, ASSIGNATION_STRING, DECLARATION_STRING;
non terminal TYPES, VALORES, PARAMS, FUNTYPES, FUN, ÑETURN_INSTRUCCION, CONST_INSTRUCTION, ASIGNACION_ARRAY, CONTENIDOS,ACCESO_ARRAY; 
non terminal E0, E1, E2, E3, E4, E5;

S ::= L_INSTRUCTION;
L_INSTRUCTION ::= INSTRUCTION;
L_INSTRUCTION ::= INSTRUCTION L_INSTRUCTION;

INSTRUCTION ::= ÑIF_INSTRUCTION;
INSTRUCTION ::= ÑHILE_INSTRUCTION;
INSTRUCTION ::= ÑOR_INSTRUCTION;
INSTRUCTION ::= ÑO_INSTRUCTION;
INSTRUCTION ::= DECLARATION_INSTRUCTION;
INSTRUCTION ::= ASSIGNATION_INSTRUCTION
INSTRUCTION ::= FUN;
INSTRUCTION ::= E0  |  ;


ÑIF_INSTRUCTION ::= ÑIF PAP E0 PCIERRE LLAP L_INSTRUCTION LLCIERRE ÑELSIF_INSTRUCTION;

ÑELSIF_INSTRUCTION ::= ÑELSE_INSTRUCTION;
ÑELSIF_INSTRUCTION ::= ÑELSIF PAP E0 PCIERRE LLAP L_INSTRUCTION LLCIERRE ÑELSIF_INSTRUCTION; 

ÑELSE_INSTRUCTION ::= ÑELSE LLAP L_INSTRUCTION LLCIERRE  |  ;

ÑHILE_INSTRUCTION ::= ÑHILE PAP E0 PCIERRE LLAP L_INSTRUCTION LLCIERRE;
ÑOR_INSTRUCTION ::= ÑOR PAP DECLARATION_INSTRUCTION PC E0 PC L_INSTRUCTION PCIERRE LLAP L_INSTRUCTION LLCIERRE;
ÑO_INSTRUCTION ::= ÑO LLAP L_INSTRUCTION LLCIERRE ÑHILE PAP E0 PCIERRE PC;

ASSIGNATION_INSTRUCTION ::= IDEN IAP E0 ICIERRE PC;
ASSIGNATION_INSTRUCTION ::= ASSIGNATION_STRING;

DECLARATION_INSTRUCTION ::= CONST_INSTRUCTION TYPES IDEN PC;
DECLARATION_INSTRUCTION ::= CONST_INSTRUCTION TYPES IDEN IAP E0 ICIERRE PC;
DECLARATION_INSTRUCTION ::= CONST_INSTRUCTION DECLARATION_STRING;

CONST_INSTRUCTION ::= CONST  |  ;

ASSIGNATION_STRING ::= IDEN IAP COMILLAS E0 COMA ICIERRE PC;
DECLARATION_STRING ::= ÑTRING IDEN IAP COMILLAS E0 COMILLAS ICIERRE PC;

E0 ::= E1 IGUAL E0;
E0 ::= E1 ÑOTIGUAL E0;
E0 ::= E1;
E1 ::= ÑOT E2;
E1 ::= E2;
E2 ::= E3 MAS E2;
E2 ::= E3 MENOS E2;
E2 ::= E3 MAS MAS;
E2 ::= E3 MENOS MENOS;
E2 ::= E3;
E3 ::= E4 POR E3;
E3 ::= E4 DIV E3;
E3 ::= E4;
E4 ::= E5 MAY E4;
E4 ::= E5 MAYI E4;
E4 ::= E5 MEN E4;
E4 ::= E5 MENI E4;
E4 ::= E5;
E5 ::= VALORES;
E5 ::= IDEN;
E5 ::= IDEN ACCESO_ARRAY;
E5 ::= PAP E0 PCIERRE;
E5 ::= ASIGNACION_ARRAY;

ASIGNACION_ARRAY ::= IAP CONTENIDOS ICIERRE;

CONTENIDOS ::= E0;
CONTENIDOS ::= E0 COMA CONTENIDOS |  ;
 
ACCESO_ARRAY ::= TAM E0 TAM;

FUN ::= ÑUN FUNTYPES IDEN PARAMS LLAP L_INSTRUCTION ÑETURN_INSTRUCCION LLCIERRE;
FUN ::= ÑUN FUNTYPES IDEN LLAP L_INSTRUCTION ÑETURN_INSTRUCCION LLCIERRE;
PARAMS ::= ARBA TYPES IDEN; 
PARAMS ::= ARBA TYPES IDEN COMA PARAMS; 

ÑETURN_INSTRUCCION ::= ÑETURN E0;

TYPES ::= ÑINT;
TYPES ::= ÑOUBLE;
TYPES ::= ÑHAR;
TYPES ::= ÑTRING;
TYPES ::= ÑOOLEAN;

FUNTYPES ::= ÑOID;
FUNTYPES ::= ÑINT;
FUNTYPES ::= ÑOUBLE;
FUNTYPES ::= ÑHAR;
FUNTYPES ::= ÑTRING;
FUNTYPES ::= ÑOOLEAN;
VALORES ::= ENT;
VALORES ::= REAL;
VALORES ::= CHAR;
VALORES ::= STR;
VALORES ::= BOOL;


